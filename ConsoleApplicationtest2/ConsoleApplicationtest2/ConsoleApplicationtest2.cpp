//Создать базовый класс «Автомобиль».Элементы класса : поле,
//содержащее наименование модели автомобиля; поле, содержащее значение
//максимальной скорости(статус доступа protected); конструктор для
//инициализации полей; функция для печати параметров автомобиля.Создать
//производный класс «Грузовой автомобиль».Элементы класса : дополнительно
//поле, содержащее грузоподъемность автомобиля в тоннах; конструктор для
//инициализации полей; переопределенная функция печати параметров
//автомобиля(внутри переопределенной функции должна вызываться функция
//из базового класса).Создать по одному объекту каждого из классов.
//Показать вызов созданных функций.При переопределении функций обеспечить
//динамический полиморфизм, показать его особенности в программе.
#include <iostream>
using namespace std;

class car {
protected:
	char model;
	double speed;
public:
	car(double m, double s) : model (m), speed(s) {}

	void printInfo() {
		cout << "model: " << model << endl;
		cout << "speed: " << speed << endl;
	}
};

class hardcar : public car  {
public:
	double tonna;

	hardcar(double m, double s) : car(m, s) {}
	virtual void printInfo() {
		cout << "model: " << model << endl;
		cout << "speed: " << speed << endl;
		cout << "speed: " << tonna << endl;
	}
};
int main()
{
	car car()
	hardcar hardcar(5.0);
}

